{"name":"Goat","tagline":"Goat implements a behave matcher which uses python3 function annotations for step definitiions","body":"<p align=\"center\"><img src=\"https://cloud.githubusercontent.com/assets/831374/7931713/d42b7f4a-090a-11e5-8b74-c96391a9503b.png\" width=\"350\" alt=\"Goat\"></p>\r\n\r\nGoat implements a matcher for [behave](https://github.com/behave/behave) which uses python3 function annotations for specifiying parameter types in step definitions.\r\n\r\n```python\r\n@given(\"my name is {name} and I'm {age} years old\")\r\ndef my_name_and_age(name: str, age: int) -> Person:\r\n    pass\r\n```\r\n\r\n## Installation\r\n```\r\npip install goat\r\n```\r\n\r\n## Getting started\r\nIf you are not familiar with behave, you can get started by reading the [tutorial](http://pythonhosted.org/behave/tutorial.html).\r\n\r\n\r\nTo start using goat you have to register the GoatMatcher in your `steps.py` file:\r\n```python\r\nfrom behave import *\r\nfrom behave import matchers\r\nfrom goat.matcher import GoatMatcher\r\n\r\nmatchers.matcher_mapping.update({\"goat\": GoatMatcher})\r\nuse_step_matcher(\"goat\")\r\n```\r\n\r\nNow you can specify you step definitions like this:\r\n```python\r\n@given(\"my name is {name} and I'm {age} years old\")\r\ndef my_name_and_age(name: str, age: int) -> Person:\r\n    ...\r\n```\r\n**Be aware that unlike other behave matchers there is no need to pass the context variable as first argument.**\r\n\r\nThe arguments will be of the right type:\r\n```\r\n>>> type(age)\r\n<type 'int'>\r\n>>> type(name)\r\n<type 'str'>\r\n```\r\n\r\nInstead of using named placeholder you can also use unnamed and indexed ones:\r\n```python\r\n@given(\"my name is {} and I'm {} years old\")\r\ndef my_name_and_age(name: str, age: int) -> Person:\r\n```\r\n```python\r\n@given(\"my name is {0} and I'm {1} years old\")\r\ndef my_name_and_age(name: str, age: int) -> Person:\r\n```\r\nThe indexes of the placeholders has to correspond to the order of the function arguments.\r\n\r\n### Types\r\nFollowing standard types are available by now: int, float, str. Behave types like Table, Context, Text are also supported.\r\nIf this is not enough, you can easily extend it (e.g. goat.types.Word):\r\n```python\r\nimport parse\r\nfrom behave import register_type\r\n\r\n@parse.with_pattern(r\"\\w+\")\r\ndef parse_word(value: str) -> Word:\r\n    return Word(value)\r\n\r\n\r\nregister_type(Word=parse_word)\r\n```\r\n\r\n**Feel free to submit a Pull Request if you think the type extension is useful for others!**\r\n\r\n### Implicit parameters\r\nAs mentioned before, there is no need to add `context` as first argument in your step definitions. But how you pass state from one step to another then? With the help of **implicit parameters** your step definitions will become much cleaner.\r\n\r\nIf you want to add some value to the context just return it in your step definition (make sure to also add a return function annotation):\r\n```python\r\n@given(\"my name is {name} and I'm {age} years old\")\r\ndef my_name_and_age(name: str, age: int) -> Person:\r\n    return Person(name, age)\r\n\r\n@then(\"assert the given person is {} years old\")\r\ndef assert_person_is_n_years_old(expected_age: int, person: Person):\r\n    assert person.age == expected_age\r\n```\r\n\r\nIf you make use of the sentences in a feature file the returned Person of the `my_name_and_age` step will be passed into the `assert_person_is_n_years_old` step.\r\n```gherkin\r\nFeature: Test\r\nScenario: Implicit parameters\r\n\r\nGiven my name is Ilja and I'm 24 years old\r\nThen assert the given person is 24 years old\r\n```\r\n\r\nYou can also use behaves `Table` and `Text` like this:\r\n```python\r\nfrom behave.model import Table, Text\r\n\r\n@given(\"following table:\")\r\ndef given_following_table(table: Table):\r\n    pass\r\n    \r\n@given(\"following text:\")\r\ndef given_following_text(text: Text):\r\n    pass\r\n```\r\n\r\nIf you really need the whole context or you want to migrate your old behave test suite, you can also pass the context explicitly:\r\n```python\r\nfrom behave.runner import Context\r\n\r\n@given(\"Assert context contains a person with age {}\")\r\ndef assert_context_contains(age: int, context: Context):\r\n    pass\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}